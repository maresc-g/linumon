{
	HEADER : {id}
	CONTENT :
		{
			# init connection
			WELCOME : {} -> server
			INITIALIZE : {} -> client
			CHECK : {} -> server
			# end


			# user connection
			CONNECTION : {pseudo : string, pass : string} -> client
			[don't exist] = ERROR : {bad username or pass : eError} -> server
			[else] = PLAYERLIST : {PLAYER : {id : int, name : string, level : int, faction : string}, ...} -> server
			CREATE : {name : string, faction : Faction} -> client
			[name exist] = ERROR : {name exists : eError} -> server
			[else] = PLAYERLIST : {PLAYER : {id : int, name : string, level : int, faction : string}, ...} -> server
			CHOOSEPLAYER : {id : int} -> client
			PLAYER : {player : Player} -> server
			MAP : {zone : Zone} -> server
			# end


			# action
			CHAT : {Zone : idZone, Message (pseudo + msg)} -> client
			CHAT : {Message (pseudo + msg)} -> server

			#  battle
			ISINBATTLE : {id : int, inBattle : bool} -> server
			LAUNCHBATTLE : {idBattle: int, enemy : APlayer} -> server
			SPELL : {idBattle: int, spell : Spell, launcher : int, target : int} -> client / server
			SPELLEFFECT : {idBattle: int, hpChange : int, target : int} -> server
			CAPTURE : {idBattle: int, target : int} -> client
			CAPTUREEFFECT : {idBattle: int, success : bool} -> server
			SWITCH : {idBattle: int, target : int, new mob : int} -> client / server
			DEADMOB : {idBattle: int, id : int} -> server
			ENDBATTLE : {idBattle: int, win : bool, money : int, exp : int, items : list of AItem} -> server
			TURNTO : {idBattle: int, id: int } -> server
			#  end

			#  stuff
			PUT : {idStack : unsigned int, target : unsgined int} -> client
			GET : {idItem : unsigned int, target : unsgined int} -> client
			[not equippable] = ERROR : {not equippable : eError} -> server
			[else] = UPDATECHARACTER : {character : ACharacter} -> server
			#  end

			#  talents
			TALENTS : {talentModel : string => unsigned int : pts, ...} -> client
			UPDATETALENTS : {playerStat : Stat} -> server
			#  end

			#  craft
			CRAFT : {nameCraft : string, nameJob : string} -> client
			-ADDTOINVENTORY : {items : list<Stack>} -> server
			-DELETEFROMINVENTORY : {items : list<Stack>} -> server
			-JOB : {job : Job} -> server
			#  end

			#  gather
			GATHER : {nameRessource : string, nameJob : string, idCarcass : unsigned int => 0 si pas de carcass} -> client
			-ADDTOINVENTORY : {item : list<Stack>} -> server
			-JOB : {job : Job} -> server
			#  end

			#  use object
			USEOBJECT : {target : idCharacter, idStack : id} -> client
			-OBJECTEFFECT : {target : id, stats : Stats} -> server
			#  end
			# end


			# interaction
			INTERACTION : {enum eInteraction, targetId } -> client

			#  trade
			LAUNCHTRADE : {idTrade : int, namePlayer : string} -> server
			PUTMOB : {idTrade : int, idMob : int} -> client
			GETMOB : {idTrade : int, idMob : int} -> client
			PUTITEM : {idTrade : int, idStack : int} -> client
			GETITEM : {idTrade : int, idStack : int} -> client
			PUTMOB : {idTrade : int, Mob : mob} -> server
			GETMOB : {idTrade : int, Mob : mob} -> server
			PUTITEM : {idTrade : int, Stack : stack} -> server
			GETITEM : {idTrade : int, Stack : stack} -> server
			PUTMONEY : {idTrade : int, money : int} -> client / server
			GETMONEY : {idTrade : int, money : int} -> client / server
			ACCEPT : {idTrade : int} -> client / server
			REFUSE : {idTrade : int} -> client / server
			#  end
			# end

			# inventory
			MERGE : {idStack : unsigned int * 2}
			NEWSTACK : {idStack : unsigned int, nbNewStack : unsigned int}
			# end

			# Guild
			GCREATE : {name : string} -> client
			-ERROR : {guild already exist : eError} -> server

			INVITE : {idPlayer : unsigned int, nameGuild : string} -> client
			-INVITE : {nameGuild : string} -> server
			-ERROR : {already in guild : eError} -> server

			ACCEPT : {nameGuild : string} -> client
			REFUSE : {} -> client
			NEWGUILD : {guild : name} -> server
			GUILD : {list of members : list<string>} -> server
			NEWMEMBER : {name : std::string} -> server

			GQUIT : {} -> client
			DELETEMEMBER : {name : std::string} -> server
			# end

			# others
			MOBTOBATTLEMOB : {idMob : int} ->client
			BATTLEMOBTOMOB : {idMob : int} ->client
			SWITCHMOBS : {idMob1 : int, idMob2 : int} ->client
			NEWPLAYER : {Id : int, name : string, faction : string, zone : string, coord : Coordinate} -> server
			VISIBLE : { Is : bool, Id : int} -> server
			QUIT : {} -> client / server
			REMOVEENTITY : {id : int} -> server
			ENTITY : {id : int, coord : Coordinate} -> server/client
			HEAL : {} -> client, server
			DISCONNECT : {} -> client
			SWITCHPLAYER : {} -> client
			NEWZONE : {zone : string, coord : Coordinate} -> server
			# end
		}
}
